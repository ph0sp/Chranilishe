import os
from telegram.ext import Updater

# Получение токена из переменных окружения
TOKEN = os.environ.get('BOT_TOKEN')
YOUR_CHAT_ID = os.environ.get('YOUR_CHAT_ID')

if not TOKEN:
    print("Ошибка: Не задан BOT_TOKEN в переменных окружения!")
    exit(1)

# Остальной код вашего бота...

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# Определяем состояния диалога
GENDER, FIRST_QUESTION = range(2)

# Список из 24 вопросов для анкеты
questions = [
    "Давайте начнем!\nПоследовательно отвечайте на вопросы в свободной форме, как вам удобно.\n\nНачнем с самого главного\n\nБлок 1: Цель и главный фокус\n\nКакая ваша главная цель на ближайший месяц? (например, запуск проекта, подготовка к экзамену, улучшение физической формы, обучение новому навыку)\n\nЖду вашего ответа, чтобы двигаться дальше.",
    "Прекрасная цель! Это комплексная задача, где важны и стратегия, и ежедневная энергия, чтобы ее реализовать.\n\nРасскажите почему для вас важна эта цель? (Это поможет понять мотивацию)",
    "Сколько часов в день вы готовы посвящать работе над этой целью? (Важно оценить ресурсы честно)",
    "Есть ли у вас дедлайн или ключевые точки контроля на этом пути?\n\nКак только вы ответите, мы перейдем к следующему блоку вопросов, чтобы понять текущий ритм жизни и выстроить план, который будет работать именно для вас.",
    "Отлично, основа понятна. Теперь давайте перейдем к вашему текущему ритму жизни, чтобы вписать эту цель в ваш день комфортно и без выгорания. \n\nБлок 2: Текущий распорядок и ресурсы\n\nВо сколько вы обычно просыпаетесь и ложитесь спать?",
    "Опишите кратко, как обычно выглядит ваш текущий день (работа, учеба, обязанности)?",
    "В какое время суток вы чувствуете себя наиболее энергичным и продуктивным? (утро, день, вечер)",
    "Сколько часов в день вы обычно тратите на соцсети, просмотр сериалов и другие не основные занятия?",
    "Как часто вы чувствуете себя перегруженным или близким к выгоранию?\n\nКак только вы ответите на эти вопросы, мы перейдем к следующим блокам (спорт, питание, отдых), чтобы сделать план по-настоящему сбалансированным. ",
    "Блок 3: Физическая активность и спорт\n\nКакой у вас текущий уровень физической активности? (сидячий, легкие прогулки, тренировки 1-2 раза в неделю, регулярные тренировки)",
    "Каким видом спорта или физической активности вам нравится заниматься/вы бы хотели заняться? (бег, йога, плавание, тренажерный зал, домашние тренировки)",
    "Сколько дней в неделю и сколько времени вы готовы выделять на спорт? (Например, 3 раза по 45 минут)",
    "Есть ли у вас ограничения по здоровью, которые нужно учитывать при планировании нагрузок?",
    "Блок 4: Питание и вода\n\nКак обычно выглядит ваш режим питания? (полноценные приемы пищи, перекусы на бегу, пропуск завтрака/ужина)",
    "Сколько стаканов воды вы примерно выпиваете за день?",
    "Хотели бы вы что-то изменить в своем питании? (например, есть больше овощей, готовить заранее, не пропускать обед, пить больше воды)",
    "Сколько времени вы обычно выделяете на приготовление еды?",
    "Хорошо, переходим к следующему блоку.\n\nБлок 5: Отдых и восстановление (критически важно во избежание выгорания)\n\nЧто помогает вам по-настоящему расслабиться и восстановить силы? (чтение, прогулка, хобби, музыка, медитация, общение с близкими, полное ничегонеделание)",
    "Как часто вам удается выделять время на эти занятия?",
    "Планируете ли вы выходные дни или микро-перерывы в течение дня?",
    "Важно ли для вас время на общение с семьей/друзьями? Сколько раз в неделю вы бы хотели это видеть в своем плане?",
    "Блок 6: Ритуалы для здоровья и самочувствия\n\nИсходя из вашего режима, предлагаю вам на выбор несколько идей. Что из этого вам откликается?\n\nУтренние ритуалы (на выбор):\n* Стакан теплой воды с лимоном: для запуска метаболизма.\n* Несложная зарядка/растяжка (5-15 мин): чтобы размяться и проснуться.\n* Медитация или ведение дневника (5-10 мин): для настройки на день.\n* Контрастный душ: для бодрости.\n* Полезный завтрак без телефона: осознанное начало дня.\n\nВечерние ритуалы (на выбор):\n* Выключение гаджетов за 1 час до сна: для улучшения качества сна.\n* Ведение дневника благодарности или запись 3х хороших событий дня.\n* Чтение книги (не с экрана).\n* Легкая растяжка или йога перед сном: для расслабления мышц.\n* Планирование главных задач на следующий день (3 дела): чтобы "выгрузить" мысли и спать спокойно.\n* Ароматерапия или спокойная музыка.\n\nКакие из этих утренних ритуалов вам были бы интересны?\n\nКакие вечерние ритуалы вы бы хотели внедрить?\n\nЕсть ли ваши личные ритуалы, которые вы хотели бы сохранить?",
    "Отлично, остался заключительный блок.\n\nБлок 7: Финальные Уточнения и Гибкость\n\nКакой ваш идеальный баланс между продуктивностью и отдыхом? (например, 70/30, 60/40)",
    "Что чаще всего мешает вам следовать планам? (неожиданные дела, лень, отсутствие мотивации)",
    "Как нам лучше всего предусмотреть дни непредвиденных обстоятельств или дни с низкой энергией? (Например, запланировать 1-2 таких дня в неделю)"
]

# Замените на ваш реальный chat_id
YOUR_CHAT_ID = "YOUR_CHAT_ID"

def start(update: Update, context: CallbackContext) -> int:
    # Создаем клавиатуру для выбора пола ассистента
    keyboard = [['Мужской', 'Женский']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    # Отправляем сообщение с клавиатурой
    update.message.reply_text(
        'Выберите пол вашего будущего ассистента: мужской/женский',
        reply_markup=reply_markup
    )
    
    return GENDER

def gender_choice(update: Update, context: CallbackContext) -> int:
    # Получаем выбранный пол ассистента
    assistant_gender = update.message.text
    context.user_data['assistant_gender'] = assistant_gender
    
    # Определяем имя ассистента в зависимости от пола
    if assistant_gender == 'Мужской':
        assistant_name = 'Антон'
    else:
        assistant_name = 'Валерия'
    
    context.user_data['assistant_name'] = assistant_name
    context.user_data['current_question'] = 0
    context.user_data['answers'] = {}
    
    # Приветствуем пользователя от имени ассистента и задаем первый вопрос
    update.message.reply_text(
        f'Привет! Меня зовут {assistant_name}!\n\nЯ ваш персональный ассистент. Моя задача – помочь структурировать ваш день для максимальной продуктивности и достижения целей без стресса и выгорания.\n\nЯ составлю для вас сбалансированный план на месяц, а затем мы будем ежедневно отслеживать прогресс и ваше состояние, чтобы вы двигались к цели уверенно и эффективно и с заботой о главных ресурсах: сне, спорте и питании.\n\nДля составления плана, который будет работать именно для вас, мне нужно понять ваш ритм жизни и цели. Это займет около 25-30 минут. Но в результате вы получите персональную стратегию на месяц, а не шаблонный список дел. Готовы начать?'
        f'{questions[0]}',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return FIRST_QUESTION

def handle_question(update: Update, context: CallbackContext) -> int:
    # Сохраняем ответ на текущий вопрос
    current_question = context.user_data['current_question']
    context.user_data['answers'][current_question] = update.message.text
    
    # Увеличиваем счетчик вопросов
    context.user_data['current_question'] += 1
    
    # Проверяем, остались ли еще вопросы
    if context.user_data['current_question'] < len(questions):
        # Задаем следующий вопрос
        next_question = context.user_data['current_question']
        update.message.reply_text(questions[next_question])
        return FIRST_QUESTION
    else:
        # Все вопросы заданы, переходим к завершению
        return finish_questionnaire(update, context)

def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    # Формируем анкету для отправки
    assistant_name = context.user_data['assistant_name']
    questionnaire = f"Новая анкета от пользователя:\n\n"
    
    for i, question in enumerate(questions):
        questionnaire += f"{i+1}. {question}\nОтвет: {context.user_data['answers'].get(i, 'Нет ответа')}\n\n"
    
    # Отправляем анкету себе
    context.bot.send_message(chat_id=YOUR_CHAT_ID, text=questionnaire)
    
    # Отправляем сообщение пользователю
    update.message.reply_text(
        f"Спасибо за ответы! {context.user_data['answers'][0]}!\n\n"
        "Я передал всю информацию нашему специалисту. В течение часа он проанализирует ваши данные и составит для вас индивидуальный/персональный план. Ожидайте сообщение."
    )
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        'Диалог прерван. Чтобы начать заново, отправьте /start',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

def main() -> None:
    # Замените "YOUR_BOT_TOKEN" на токен вашего бота
    updater = Updater("BOT_TOKEN")
    dispatcher = updater.dispatcher

    # Настройка обработчика диалога
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [MessageHandler(Filters.regex('^(Мужской|Женский)$'), gender_choice)],
            FIRST_QUESTION: [MessageHandler(Filters.text & ~Filters.command, handle_question)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    dispatcher.add_handler(conv_handler)
    
    # Запуск бота
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
